version: "3.7"

services:
  server:
    container_name: app.nginx
    build:
      context: docker/nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - fpm
      - db
      - node
    volumes:
      - .:/var/www/app
    networks:
      - app

  fpm:
    container_name: app.php-fpm
    build:
      context: docker/php
      dockerfile: fpm/Dockerfile
      args:
        - uid=${uid}
    tty: true
    volumes:
      - .:/var/www/app
    networks:
      - app

  db:
    container_name: app.database
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"
      POSTGRES_USER: "${DATABASE_USER}"
      POSTGRES_DB: "${DATABASE_NAME}"
    networks:
      - app

#  db:
#    container_name: app.database
#    image: mysql:8.0
#    environment:
#      MYSQL_ROOT_PASSWORD: "${DB_PASSWORD}"
#      MYSQL_USER: "${DB_USERNAME}"
#      MYSQL_PASSWORD: "${DB_PASSWORD}"
#      MYSQL_DATABASE: "${DB_DATABASE}"
#    volumes:
#      - mysql_volume:/var/lib/mysql
#    ports:
#      - "${DB_PORT}:3306"
#    networks:
#      - app

  node:
    container_name: app.nodejs
    image: node:16-alpine3.11
    working_dir: /var/www/app
    volumes:
      - .:/var/www/app
    networks:
      - app

  mongodb:
    container_name: app.mongo
    restart: always
    image: mongo:5.0.0-rc1
    ports:
      - "27017:27017"
    volumes:
      - mongodb_volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
    command: ["mongod", "--bind_ip", "0.0.0.0"]
    networks:
      - app

  mongo-express:
    container_name: app.mongo-express
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: "${ME_CONFIG_MONGODB_ADMINUSERNAME}"
      ME_CONFIG_MONGODB_ADMINPASSWORD: "${ME_CONFIG_MONGODB_ADMINPASSWORD}"
    networks:
      - app

  redis:
    container_name: app.redis
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_volume:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - app

  message-broker:
    container_name: app.rabbitmq
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app

#  elastic-search:
#    container_name: app.elastic
#    image: elasticsearch:7.13.0
#    ports:
#      - 9200:9200
#      - 9600:9600
#    networks:
#      - app

networks:
  app:
    driver: bridge

volumes:
#  mysql_volume:
#    driver: local
  postgres_volume:
    driver: local
  mongodb_volume:
    driver: local
  redis_volume:
    driver: local
  rabbitmq_volume:
    driver: local
