security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
#        users_in_memory: { memory: null }
    password_hasher:
            class: App\Entity\User
            algorithm: auto

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
#
        login:
#          host: ^api\.
          pattern: ^/v1/login
          stateless: true
          provider: app_user_provider
          json_login:
            check_path: api_login
            success_handler: lexik_jwt_authentication.handler.authentication_success
            failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
          host: ^api\.%app.host%$
          stateless: true
          provider: app_user_provider
          json_login:
            check_path: api_login
            success_handler: lexik_jwt_authentication.handler.authentication_success
            failure_handler: lexik_jwt_authentication.handler.authentication_failure
          jwt: ~
          refresh_jwt:
            check_path: api_refresh_token
          entry_point: jwt
          custom-authenticators:
            - App\Security\CustomAuthenticators\JWTAuthenticator

        main:
            lazy: true
            provider: app_user_provider

            form_login:
                login_path: web_login
                check_path: web_login
                enable_csrf: true
                success_handler: App\Security\CustomAuthenticators\AuthenticationSuccessHandler
                default_target_path: web_admin_account

            logout:
              path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: /login, roles: PUBLIC_ACCESS }
         - { path: ^/admin, roles: ROLE_ADMIN }
         - { host: ^/moderator, roles: ROLE_MODERATOR }
         - { host: ^api\., path: ^/v1/(login|token/refresh), roles: PUBLIC_ACCESS }
         - { host: ^api\., roles: IS_AUTHENTICATED_FULLY }
         - { path: /account, roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
      ROLE_ADMIN: [ROLE_MODERATOR, ROLE_USER]
